
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#ifndef __DIoLLaserUnit__H__
#define __DIoLLaserUnit__H__

#include <Base_DIoLLaserUnit.h>
#include <json.hpp>
using json = nlohmann::json;
namespace device {
  class Laser;
}

namespace Device
{

class
    DIoLLaserUnit
    : public Base_DIoLLaserUnit
{

public:
    /* sample constructor */
    explicit DIoLLaserUnit (
        const Configuration::IoLLaserUnit& config,
        Parent_DIoLLaserUnit* parent
    ) ;
    /* sample dtr */
    ~DIoLLaserUnit ();

    /* delegators for
    cachevariables and sourcevariables */
    /* Note: never directly call this function. */
    UaStatus writeQswitch_us ( const OpcUa_UInt32& v);
    /* Note: never directly call this function. */
    UaStatus writeDischarge_voltage_kV ( const OpcUa_Float& v);
    /* Note: never directly call this function. */
    UaStatus writeRep_rate_hz ( const OpcUa_Double& v);
    /* Note: never directly call this function. */
    UaStatus writeRep_rate_divider ( const OpcUa_UInt16& v);
    /* Note: never directly call this function. */
    UaStatus writeExt_shutter_time_pre_shot ( const OpcUa_UInt32& v);
    /* Note: never directly call this function. */
    UaStatus writeExt_shutter_open_time_us ( const OpcUa_UInt32& v);


    /* delegators for methods */
    UaStatus callStop (

    ) ;
    UaStatus callCheck_status (
        OpcUa_UInt16& status
    ) ;
    UaStatus callConfigure_laser (
        const UaString&  config,
        UaString& response
    ) ;
    UaStatus callSingle_shot (
        UaString& response
    ) ;
    UaStatus callSwitch_shutter (
        OpcUa_Boolean open,
        UaString& response
    ) ;
    UaStatus callFire_standalone (
        OpcUa_Boolean fire,
        UaString& response
    ) ;

private:
    /* Delete copy constructor and assignment operator */
    DIoLLaserUnit( const DIoLLaserUnit& other );
    DIoLLaserUnit& operator=(const DIoLLaserUnit& other);

    // ----------------------------------------------------------------------- *
    // -     CUSTOM CODE STARTS BELOW THIS COMMENT.                            *
    // -     Don't change this comment, otherwise merge tool may be troubled.  *
    // ----------------------------------------------------------------------- *

public:
    enum Status{sOffline=0x0,sUnconfigured=1,sReady=2,sFiring=3};
    UaStatus init_device(json &resp);
    void update() {}

    bool is_ready() {return m_is_ready;}
private:
    bool m_is_ready;
    Status m_status;
    device::Laser *m_laser;


};

}

#endif // __DIoLLaserUnit__H__