
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#ifndef __DIoLLaserUnit__H__
#define __DIoLLaserUnit__H__

#include <Base_DIoLLaserUnit.h>
#include <json.hpp>
using json = nlohmann::json;
namespace device {
  class Laser;
}

namespace Device
{

class
    DIoLLaserUnit
    : public Base_DIoLLaserUnit
{

public:
    /* sample constructor */
    explicit DIoLLaserUnit (
        const Configuration::IoLLaserUnit& config,
        Parent_DIoLLaserUnit* parent
    ) ;
    /* sample dtr */
    ~DIoLLaserUnit ();

    /* delegators for
    cachevariables and sourcevariables */
    /* Note: never directly call this function. */
    UaStatus writeQswitch_us ( const OpcUa_UInt32& v);
    /* Note: never directly call this function. */
    UaStatus writeDischarge_voltage_kV ( const OpcUa_Float& v);
    /* Note: never directly call this function. */
    UaStatus writeRep_rate_hz ( const OpcUa_Float& v);
    /* Note: never directly call this function. */
    UaStatus writeRep_rate_divider ( const OpcUa_UInt16& v);


    /* delegators for methods */
    UaStatus callSet_connection (
        const UaString&  device_port,
        OpcUa_UInt16 baud_rate,
        UaString& response
    ) ;
    UaStatus callConfig (
        const UaString&  conf,
        UaString& response
    ) ;
    UaStatus callInit (
        UaString& response
    ) ;
    UaStatus callStop (
        UaString& response
    ) ;
    UaStatus callCheck_status (
        OpcUa_UInt16& status,
        UaString& description
    ) ;
    UaStatus callSingle_shot (
        UaString& response
    ) ;
    UaStatus callFire_standalone (
        OpcUa_Boolean fire,
        OpcUa_UInt32 num_shots,
        UaString& response
    ) ;
    UaStatus callSwitch_laser_shutter (
        OpcUa_Boolean close,
        UaString& response
    ) ;
    UaStatus callForce_ext_shutter (
        OpcUa_Boolean close,
        UaString& response
    ) ;
    UaStatus callTerminate (
        UaString& response
    ) ;

private:
    /* Delete copy constructor and assignment operator */
    DIoLLaserUnit( const DIoLLaserUnit& other );
    DIoLLaserUnit& operator=(const DIoLLaserUnit& other);

    // ----------------------------------------------------------------------- *
    // -     CUSTOM CODE STARTS BELOW THIS COMMENT.                            *
    // -     Don't change this comment, otherwise merge tool may be troubled.  *
    // ----------------------------------------------------------------------- *

public:
    enum Status{sOffline=0x0,sReady=2,sLasing=3};
    // bitfield with the settings that are already configured
    typedef struct {
      uint8_t hv :1;
      uint8_t r_div :1;
      uint8_t rate : 1;
      uint8_t qsw : 1;
      void init(uint8_t v) {hv = v & 0x1; r_div = v & 0x2; rate = v & 0x4; qsw = v & 0x8;};
    } laser_word;
    //
    typedef union conf_word
    {
      laser_word word;
      bool is_ready() {return (*reinterpret_cast<uint8_t*>(&word) == 0xF);};
    } conf_word;
    //
    // the real worker methods
    //
    UaStatus set_conn(const std::string port, uint16_t baud, json &resp);
    UaStatus init(json &resp);
    UaStatus config(json &conf, json &resp);
    UaStatus stop(json &resp);
    UaStatus single_shot(json &resp);
    UaStatus fire_standalone(uint32_t num_pulses,json &resp);
    UaStatus switch_laser_shutter(const bool close, json &resp);
    UaStatus force_ext_shutter(const bool close, json &resp);
    UaStatus terminate(json &resp);
    //
    // auxiliary methods that are called by other services
    //
    void update();
    //
    bool get_counting_flashes() {return m_count_flashes;}
    void set_counting_flashes(bool s) {m_count_flashes = s;}
    UaStatus refresh_shot_count();
    bool is_ready() {return (m_status == sReady);}
    //
private:
    // -- private methods
    void update_status(Status nst);
    void automatic_port_search();
    void refresh_status(json &resp);
    void refresh_status(void);
    bool validate_config_fragment(json &conf, json &resp);
    // methods that internally deal with the device writing logic
    UaStatus write_divider(const uint16_t v,json &resp);
    UaStatus write_rate(const float v,json &resp);
    UaStatus write_hv(const float v,json &resp);
    UaStatus write_qswitch(const uint16_t v,json &resp);
    //
    void timer_start(DIoLLaserUnit *obj);
    //
    //
    bool m_is_ready;
    Status m_status;
    //
    device::Laser *m_laser;
    uint16_t m_divider;
    float m_pump_hv;
    float m_rate_hz;
    uint32_t m_qswitch;
    bool m_laser_shutter_close;
    uint32_t m_shot_count;
    //
    std::string m_comport;
    uint16_t m_baud_rate;
    bool m_count_flashes;
    //
    //
    std::map<Status,std::string> m_status_map;
    std::string m_name;
    conf_word m_config;
    //
    std::uint32_t m_idle_counter;
    std::uint32_t m_idle_timeout; // timeout after which the laser
};

}

#endif // __DIoLLaserUnit__H__
