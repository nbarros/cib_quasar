
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#ifndef __DIoLPowerMeter__H__
#define __DIoLPowerMeter__H__

#include <Base_DIoLPowerMeter.h>
#include <json.hpp>
using json = nlohmann::json;

namespace device {
  class PowerMeter;
}

namespace Device
{

class
    DIoLPowerMeter
    : public Base_DIoLPowerMeter
{

public:
    /* sample constructor */
    explicit DIoLPowerMeter (
        const Configuration::IoLPowerMeter& config,
        Parent_DIoLPowerMeter* parent
    ) ;
    /* sample dtr */
    ~DIoLPowerMeter ();

    /* delegators for
    cachevariables and sourcevariables */


    /* delegators for methods */
    UaStatus callInit (
        UaString& response
    ) ;
    UaStatus callSet_connection (
        const UaString&  port,
        OpcUa_UInt16 baud_rate,
        UaString& response
    ) ;
    UaStatus callSet_average (
        OpcUa_UInt16 target_value,
        UaString& response
    ) ;
    UaStatus callSet_range (
        OpcUa_Int16 target_value,
        UaString& response
    ) ;
    UaStatus callSet_pulse_width (
        OpcUa_UInt16 target_value,
        UaString& response
    ) ;
    UaStatus callSet_threshold (
        OpcUa_UInt16 target_value,
        UaString& response
    ) ;
    UaStatus callSet_wavelength (
        OpcUa_UInt16 target_value,
        UaString& response
    ) ;
    UaStatus callSet_measurement_mode (
        OpcUa_UInt16 target_value,
        UaString& response
    ) ;
    UaStatus callReset (

    ) ;
    UaStatus callConfig (
        const UaString&  conf,
        UaString& response
    ) ;
    UaStatus callStop_measurements (
        UaString& response
    ) ;
    UaStatus callStart_measurements (
        UaString& response
    ) ;
    UaStatus callTerminate (
        UaString& response
    ) ;

private:
    /* Delete copy constructor and assignment operator */
    DIoLPowerMeter( const DIoLPowerMeter& other );
    DIoLPowerMeter& operator=(const DIoLPowerMeter& other);

    // ----------------------------------------------------------------------- *
    // -     CUSTOM CODE STARTS BELOW THIS COMMENT.                            *
    // -     Don't change this comment, otherwise merge tool may be troubled.  *
    // ----------------------------------------------------------------------- *
    UaStatus set_conn(const std::string port, const uint16_t baud, json &resp);
    // variable proxy setters. These can be called internally (unlike the others)
    UaStatus set_average(const uint16_t ave, json &resp);
    UaStatus set_range(const uint16_t range, json &resp);
    UaStatus set_pwidth(const uint16_t pwidth, json &resp);
    UaStatus set_thresh(const uint16_t thresh, json &resp);
    UaStatus set_lambda(const uint16_t lambda, json &resp);
    UaStatus set_mmode(const uint16_t mmode, json &resp);
    // methods that change the internal state machine
    UaStatus init(json &resp, bool start = true);
    UaStatus reset(json &resp);
    UaStatus config(json &conf, json &resp);
    UaStatus stop_readings(json &resp);
    UaStatus start_readings(json &resp);
    UaStatus terminate(json &resp);
public:
    enum Status{sOffline=0x0,sReady=2,sReading=3};
    void update();
    bool is_ready();
private:
    void automatic_port_search();
    void refresh_all_ranges();
    void refresh_measurement_modes();
    void refresh_measurement_ranges();
    void refresh_pulse_width_ranges();
    void refresh_average_ranges();
    void refresh_threshold_limits();
    void refresh_energy_reading();
    void refresh_average_reading();
    bool validate_config_fragment(json &c, json &r);
    void update_status(Status new_state);
    // check if there is a new energy reading.
    // update the value if yes
    //void refresh_energy_reading();
    //UaStatus init_connection(json &resp);
    device::PowerMeter *m_pm;
    std::string m_comport;
    uint16_t m_baud_rate;
    Status m_status;
    //
    uint16_t m_measurement_mode;
    int16_t m_sel_range;
    uint16_t m_wavelength;
    uint16_t m_e_threshold;
    uint16_t m_ave_setting;
    uint16_t m_pulse_width;
    double m_energy_reading;
    double m_average_reading;
    //
    std::map<int16_t,std::string> m_ranges;
    std::map<uint16_t,std::string> m_pulse_widths;
    std::map<uint16_t,std::string> m_ave_windows;
    std::map<uint16_t,std::string> m_measurement_modes;
    std::map<Status,std::string> m_status_map;
    std::pair<uint16_t,uint16_t> m_threshold_limits;
    bool m_pause_measurements;
    std::string m_name;
    std::string m_serial_number;
};

}

#endif // __DIoLPowerMeter__H__
