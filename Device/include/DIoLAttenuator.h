
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#ifndef __DIoLAttenuator__H__
#define __DIoLAttenuator__H__

#include <Base_DIoLAttenuator.h>
#include <json.hpp>
using json = nlohmann::json;
namespace device
{
  class Attenuator;
}
namespace Device
{

class
    DIoLAttenuator
    : public Base_DIoLAttenuator
{

public:
    /* sample constructor */
    explicit DIoLAttenuator (
        const Configuration::IoLAttenuator& config,
        Parent_DIoLAttenuator* parent
    ) ;
    /* sample dtr */
    ~DIoLAttenuator ();

    /* delegators for
    cachevariables and sourcevariables */


    /* delegators for methods */
    UaStatus callConfigure_attenuator (
        const UaString&  json_config,
        UaString& response
    ) ;
    UaStatus callSet_transmission (
        OpcUa_Double transmission,
        UaString& response
    ) ;
    UaStatus callSet_conn_details (
        const UaString&  port,
        OpcUa_UInt16 baud_rate,
        UaString& response
    ) ;
    UaStatus callStop (
        UaString& response
    ) ;
    UaStatus callSet_resolution (
        OpcUa_UInt16 resolution_setting,
        UaString& response
    ) ;
    UaStatus callSet_current (
        OpcUa_UInt16 idle_setting,
        OpcUa_UInt16 moving_setting,
        UaString& response
    ) ;
    UaStatus callSet_acceleration (
        OpcUa_UInt16 acceleration,
        UaString& response
    ) ;
    UaStatus callSet_deceleration (
        OpcUa_UInt16 deceleration,
        UaString& response
    ) ;
    UaStatus callSet_max_speed (
        OpcUa_UInt16 max_speed,
        UaString& response
    ) ;
    UaStatus callGet_status (
        UaString& response
    ) ;

private:
    /* Delete copy constructor and assignment operator */
    DIoLAttenuator( const DIoLAttenuator& other );
    DIoLAttenuator& operator=(const DIoLAttenuator& other);

    // ----------------------------------------------------------------------- *
    // -     CUSTOM CODE STARTS BELOW THIS COMMENT.                            *
    // -     Don't change this comment, otherwise merge tool may be troubled.  *
    // ----------------------------------------------------------------------- *

public:
    // as the device stores configuration internally,
    // there is no minimal setting necessary
    // as far as the connection is set, one is ready to operate
    enum Status{sOffline=0x0,sReady=1};
    void update();
    bool is_ready() {return (m_status == sReady);}
private:
    // -- private methods
    void automatic_port_search();
    void refresh_status(json &resp);
    void refresh_position();
    UaStatus init_device(json &resp);
    // private workers for all the exposed methods
    UaStatus config_device(json config, json &resp);
    UaStatus set_transmission(double t, json &resp);
    UaStatus set_connection(const std::string port, const uint32_t baud_rate, json &resp);
    UaStatus stop(json &resp);
    UaStatus set_resolution(const uint16_t v, json &resp);
    UaStatus set_current_idle(const uint16_t v, json &resp);
    UaStatus set_current_moving(const uint16_t v, json &resp);
    UaStatus set_acceleration(const uint16_t v, json &resp);
    UaStatus set_deceleration(const uint16_t v, json &resp);
    UaStatus set_max_speed(const uint32_t v, json &resp);
    //
    //
    bool m_is_ready; // declares where it is ready for operation
    // this essentially means that all settings are in a reasonable state
    device::Attenuator *m_att;
    //
    std::string m_comport;
    uint32_t m_baud_rate;
    // -- variables to identify the device
    std::string m_sn;
    std::string m_name;
    //
    int32_t m_offset;
    uint32_t m_max_speed;
    uint16_t m_motor_state;
    uint16_t m_acceleration;
    uint16_t m_deceleration;
    uint16_t m_resolution_setting;
    int32_t m_position;
    uint16_t m_current_idle;
    uint16_t m_current_moving;
    double m_transmission;
    // maps
    std::map<uint16_t,std::string> m_motor_states;
    std::map<uint16_t,std::string> m_resolution_states;
    //
    Status m_status;
};

}

#endif // __DIoLAttenuator__H__
