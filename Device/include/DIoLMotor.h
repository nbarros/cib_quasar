
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#ifndef __DIoLMotor__H__
#define __DIoLMotor__H__

#include <Base_DIoLMotor.h>
#include <vector>
#include <string>
using std::vector;
using string = std::string;

#include <json.hpp>
using json = nlohmann::json;

namespace Device
{

class
    DIoLMotor
    : public Base_DIoLMotor
{

public:
    /* sample constructor */
    explicit DIoLMotor (
        const Configuration::IoLMotor& config,
        Parent_DIoLMotor* parent
    ) ;
    /* sample dtr */
    ~DIoLMotor ();

    /* delegators for
    cachevariables and sourcevariables */
    /* Note: never directly call this function. */
    UaStatus writePositionSetPoint ( const OpcUa_Int32& v);
    /* Note: never directly call this function. */
    UaStatus writeRefresh_period_ms ( const OpcUa_UInt32& v);


    /* delegators for methods */
    UaStatus callStart_move (
        UaString& response
    ) ;
    UaStatus callStop (
        UaString& response
    ) ;
    UaStatus callConfigure_motor (
        const UaString&  config_json,
        UaString& response
    ) ;

private:
    /* Delete copy constructor and assignment operator */
    DIoLMotor( const DIoLMotor& other );
    DIoLMotor& operator=(const DIoLMotor& other);

    static size_t curl_write_function(void* ptr, size_t size, size_t nmemb, std::string* data);
    //void timer_start(std::function<void(void)> func, unsigned int interval);
    void timer_start(DIoLMotor *obj);

    void refresh_server_info();
    // ----------------------------------------------------------------------- *
    // -     CUSTOM CODE STARTS BELOW THIS COMMENT.                            *
    // -     Don't change this comment, otherwise merge tool may be troubled.  *
    // ----------------------------------------------------------------------- *

public:
    void update();

    bool is_ready();


    UaStatus sim_get_motor_info();
    UaStatus sim_move_motor(json &resp);
    UaStatus sim_stop_motor(json &resp);


    UaStatus get_motor_info();
    UaStatus move_motor(json &resp);
    UaStatus stop_motor(json &resp);

    const bool get_monitor() {return m_monitor;}
    void set_monitor(bool m) {m_monitor = m;}

private:
    const uint16_t get_refresh_ms() {return m_refresh_ms;}
    // these are internal variables to simulate the movement itself
    void sim_mv();
    int32_t m_sim_pos;
    int32_t m_sim_speed;
    int32_t m_sim_tpos;
    bool m_sim_moving;


private:
    int32_t m_position;
    int32_t m_position_setpoint;
    bool m_is_ready; // declares where it is ready for operation
        // this essentially means that all settings are in a reasonable state
    bool is_moving_; // -- this variable will be set by a GPIO bit. That code is not ready yet
    uint32_t m_acceleration;
    uint32_t m_deceleration;
    uint32_t m_speed_setpoint;
    uint32_t m_speed_readout; // current speed reported by the motor
    double m_torque;
    double m_temperature;
    uint32_t m_refresh_ms;
    bool m_monitor;
    OpcUa_StatusCode m_monitor_status;
    std::string m_server_host;
    uint16_t m_server_port;

};

}

#endif // __DIoLMotor__H__
