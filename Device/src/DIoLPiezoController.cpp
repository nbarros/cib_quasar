
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#include <Configuration.hxx> // TODO; should go away, is already in Base class for ages

#include <DIoLPiezoController.h>
#include <ASIoLPiezoController.h>

namespace Device
{
// 1111111111111111111111111111111111111111111111111111111111111111111111111
// 1     GENERATED CODE STARTS HERE AND FINISHES AT SECTION 2              1
// 1     Users don't modify this code!!!!                                  1
// 1     If you modify this code you may start a fire or a flood somewhere,1
// 1     and some human being may possible cease to exist. You don't want  1
// 1     to be charged with that!                                          1
// 1111111111111111111111111111111111111111111111111111111111111111111111111






// 2222222222222222222222222222222222222222222222222222222222222222222222222
// 2     SEMI CUSTOM CODE STARTS HERE AND FINISHES AT SECTION 3            2
// 2     (code for which only stubs were generated automatically)          2
// 2     You should add the implementation but dont alter the headers      2
// 2     (apart from constructor, in which you should complete initializati2
// 2     on list)                                                          2
// 2222222222222222222222222222222222222222222222222222222222222222222222222

/* sample ctr */
DIoLPiezoController::DIoLPiezoController (
    const Configuration::IoLPiezoController& config,
    Parent_DIoLPiezoController* parent
):
    Base_DIoLPiezoController( config, parent)

    /* fill up constructor initialization list here */
{
    /* fill up constructor body here */
  m_state_map.insert({sOffline,"offline"});
  m_state_map.insert({sReady,"ready"});
  m_state_map.insert({sWarmup,"warmup"});
  m_state_map.insert({sOperating,"operating"});
  m_state_map.insert({sPause,"pause"});
  m_state_map.insert({sStandby,"standby"});
  update_state(sOffline);

}

/* sample dtr */
DIoLPiezoController::~DIoLPiezoController ()
{
}

/* delegates for cachevariables */



/* delegators for methods */

// 3333333333333333333333333333333333333333333333333333333333333333333333333
// 3     FULLY CUSTOM CODE STARTS HERE                                     3
// 3     Below you put bodies for custom methods defined for this class.   3
// 3     You can do whatever you want, but please be decent.               3
// 3333333333333333333333333333333333333333333333333333333333333333333333333
UaStatus DIoLPiezoController::set_id(const std::string &id)
{
  m_id = id;
  return OpcUa_Good;
}
UaStatus DIoLPiezoController::terminate(json &resp)
{
  //
  //FIXME:  Finish this implementation
  update_state(sOffline);
  return OpcUa_Good;
}
void DIoLPiezoController::update_state(State s)
{
  m_state = s;
  UaString ss(m_state_map.at(m_state).c_str());
  //getAddressSpaceLink()->setState(ss,OpcUa_Good);
}


}
